# vim: ft=dockerfile:
FROM ubuntu:22.04 as builder

WORKDIR /root
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
      unzip bzip2 make binutils autoconf automake autotools-dev \
      libtool pkg-config git curl ca-certificates xz-utils && \
    rm -rf /var/cache/apt/*

# NDK 配置
ENV NDK_VERSION=r28
ENV NDK=/root/android-ndk-${NDK_VERSION}
ENV TOOLCHAIN=${NDK}/toolchains/llvm/prebuilt/linux-x86_64 \
    HOST=aarch64-linux-android \
    API=33
ENV AR=${TOOLCHAIN}/bin/llvm-ar \
    CC=${TOOLCHAIN}/bin/${HOST}${API}-clang \
    CXX=${TOOLCHAIN}/bin/${HOST}${API}-clang++ \
    STRIP=${TOOLCHAIN}/bin/llvm-strip \
    PREFIX=/root/usr/local

# 下载 NDK
RUN curl -L -O https://dl.google.com/android/repository/android-ndk-${NDK_VERSION}-linux.zip && \
    unzip -q android-ndk-${NDK_VERSION}-linux.zip && \
    rm android-ndk-${NDK_VERSION}-linux.zip

# 编译环境变量
ENV CFLAGS="-static -Os" \
    LDFLAGS="-static -s" \
    PKG_CONFIG_PATH="${PREFIX}/lib/pkgconfig"

# 编译基础依赖
WORKDIR /root/build

# 编译 zlib
RUN curl -L https://zlib.net/zlib-1.3.1.tar.gz | tar xz && \
    cd zlib-1.3.1 && \
    CC=${CC} ./configure --static --prefix=${PREFIX} && \
    make -j$(nproc) install

# 编译工具链
WORKDIR /root/build

# 编译 bash (5.2)
RUN curl -L https://ftp.gnu.org/gnu/bash/bash-5.2.tar.gz | tar xz && \
    cd bash-5.2 && \
    ./configure \
      --host=${HOST} \
      --prefix=${PREFIX} \
      --without-bash-malloc \
      --enable-static-link \
      CFLAGS="${CFLAGS}" LDFLAGS="${LDFLAGS}" && \
    make -j$(nproc) install

# 编译 grep (3.11)
RUN curl -L https://ftp.gnu.org/gnu/grep/grep-3.11.tar.xz | tar xJ && \
    cd grep-3.11 && \
    ./configure \
      --host=${HOST} \
      --prefix=${PREFIX} \
      --disable-nls \
      --enable-static \
      CFLAGS="${CFLAGS}" LDFLAGS="${LDFLAGS}" && \
    make -j$(nproc) install

# 编译 wget (1.21.4)
RUN curl -L https://ftp.gnu.org/gnu/wget/wget-1.21.4.tar.gz | tar xz && \
    cd wget-1.21.4 && \
    ./configure \
      --host=${HOST} \
      --prefix=${PREFIX} \
      --disable-nls \
      --disable-ipv6 \
      --enable-static \
      --with-ssl=openssl \
      CFLAGS="${CFLAGS} -I${PREFIX}/include" \
      LDFLAGS="${LDFLAGS} -L${PREFIX}/lib" && \
    make -j$(nproc) install

# 编译 jq (1.7)
RUN git clone --depth 1 --branch jq-1.7 https://github.com/jqlang/jq.git && \
    cd jq && \
    git submodule update --init && \
    autoreconf -fi && \
    ./configure \
      --host=${HOST} \
      --prefix=${PREFIX} \
      --enable-static \
      --disable-maintainer-mode \
      CFLAGS="${CFLAGS}" LDFLAGS="${LDFLAGS}" && \
    make -j$(nproc) install

# 编译 coreutils (9.4) 用于获取静态版 echo
RUN curl -L https://ftp.gnu.org/gnu/coreutils/coreutils-9.4.tar.xz | tar xJ && \
    cd coreutils-9.4 && \
    ./configure \
      --host=${HOST} \
      --prefix=${PREFIX} \
      --enable-static \
      --disable-nls \
      CFLAGS="${CFLAGS}" LDFLAGS="${LDFLAGS}" && \
    make -j$(nproc) install

# 编译 tar (1.35)
RUN curl -L https://ftp.gnu.org/gnu/tar/tar-1.35.tar.gz | tar xz && \
    cd tar-1.35 && \
    ./configure \
      --host=${HOST} \
      --prefix=${PREFIX} \
      --enable-static \
      --disable-nls \
      CFLAGS="${CFLAGS}" LDFLAGS="${LDFLAGS}" && \
    make -j$(nproc) install

# 最终镜像
FROM ubuntu:22.04
COPY --from=builder /root/usr/local/bin/ /app/
RUN find /app -executable -type f -exec strip {} \;  # 二次精简二进制体积
